; ModuleID = 'pcl program'
source_filename = "pcl program"

@0 = private unnamed_addr constant [11 x i8] c"Move from \00", align 1
@1 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@2 = private unnamed_addr constant [3 x i8] c".\0A\00", align 1
@3 = private unnamed_addr constant [36 x i8] c"Please, give the number of rings : \00", align 1
@4 = private unnamed_addr constant [26 x i8] c"\0AHere is the solution :\0A\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@6 = private unnamed_addr constant [6 x i8] c"right\00", align 1
@7 = private unnamed_addr constant [7 x i8] c"middle\00", align 1

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString([0 x i8]*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @trunc2(double)

declare i32 @round2(double)

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, [0 x i8]*)

declare i32 @cMalloc(i64)

define i32 @main() {
entry:
  call void @writeString([0 x i8]* bitcast ([36 x i8]* @3 to [0 x i8]*))
  %0 = call i32 @readInteger()
  call void @writeString([0 x i8]* bitcast ([26 x i8]* @4 to [0 x i8]*))
  call void @hanoi([0 x i8]* bitcast ([5 x i8]* @5 to [0 x i8]*), [0 x i8]* bitcast ([6 x i8]* @6 to [0 x i8]*), [0 x i8]* bitcast ([7 x i8]* @7 to [0 x i8]*), i32 %0)
  ret i32 0
}

define internal void @hanoi([0 x i8]* %source, [0 x i8]* %target, [0 x i8]* %auxiliary, i32 %rings) {
hanoi:
  %source1 = alloca [0 x i8]*, align 8
  store [0 x i8]* %source, [0 x i8]** %source1, align 8
  %target2 = alloca [0 x i8]*, align 8
  store [0 x i8]* %target, [0 x i8]** %target2, align 8
  %auxiliary3 = alloca [0 x i8]*, align 8
  store [0 x i8]* %auxiliary, [0 x i8]** %auxiliary3, align 8
  %rings4 = alloca i32, align 4
  store i32 %rings, i32* %rings4, align 4
  %0 = load i32, i32* %rings4, align 4
  %1 = icmp sge i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %hanoi
  %2 = load [0 x i8]*, [0 x i8]** %source1, align 8
  %3 = load [0 x i8]*, [0 x i8]** %auxiliary3, align 8
  %4 = load [0 x i8]*, [0 x i8]** %target2, align 8
  %5 = load i32, i32* %rings4, align 4
  %6 = sub i32 %5, 1
  call void @hanoi([0 x i8]* %2, [0 x i8]* %3, [0 x i8]* %4, i32 %6)
  %7 = load [0 x i8]*, [0 x i8]** %source1, align 8
  %8 = load [0 x i8]*, [0 x i8]** %target2, align 8
  call void @move([0 x i8]* %7, [0 x i8]* %8)
  %9 = load [0 x i8]*, [0 x i8]** %auxiliary3, align 8
  %10 = load [0 x i8]*, [0 x i8]** %target2, align 8
  %11 = load [0 x i8]*, [0 x i8]** %source1, align 8
  %12 = load i32, i32* %rings4, align 4
  %13 = sub i32 %12, 1
  call void @hanoi([0 x i8]* %9, [0 x i8]* %10, [0 x i8]* %11, i32 %13)
  br label %merge

else:                                             ; preds = %hanoi
  br label %merge

merge:                                            ; preds = %else, %then
  ret void
}

define internal void @move([0 x i8]* %source, [0 x i8]* %target) {
move:
  %source1 = alloca [0 x i8]*, align 8
  store [0 x i8]* %source, [0 x i8]** %source1, align 8
  %target2 = alloca [0 x i8]*, align 8
  store [0 x i8]* %target, [0 x i8]** %target2, align 8
  call void @writeString([0 x i8]* bitcast ([11 x i8]* @0 to [0 x i8]*))
  %0 = load [0 x i8]*, [0 x i8]** %source1, align 8
  call void @writeString([0 x i8]* %0)
  call void @writeString([0 x i8]* bitcast ([5 x i8]* @1 to [0 x i8]*))
  %1 = load [0 x i8]*, [0 x i8]** %target2, align 8
  call void @writeString([0 x i8]* %1)
  call void @writeString([0 x i8]* bitcast ([3 x i8]* @2 to [0 x i8]*))
  ret void
}
